{"version":3,"sources":["utils/config.js","utils/near.js","components/Wallet.js","components/utils/Notifications.js","components/marketplace/AddMeme.js","components/marketplace/Meme.js","components/utils/Loader.js","utils/ipfs.js","utils/marketplace.js","components/marketplace/Memes.js","components/utils/Cover.js","assets/img/dgm.jpg","App.js","reportWebVitals.js","index.js"],"names":["CONTRACT_NAME","process","environment","env","networkId","nodeUrl","contractName","walletUrl","helperUrl","explorerUrl","Error","nearEnv","a","connect","Object","assign","deps","keyStore","keyStores","BrowserLocalStorageKeyStore","near","window","walletConnection","WalletConnection","accountId","getAccountId","contract","Contract","account","viewMethods","changeMethods","accountBalance","formatNearAmount","getAccountBalance","total","login","requestSignIn","logout","signOut","location","reload","Wallet","address","amount","symbol","destroy","Dropdown","Toggle","variant","align","id","className","Spinner","animation","size","Menu","Item","href","target","Stack","direction","gap","Divider","as","onClick","Notification","position","autoClose","hideProgressBar","newestOnTop","closeOnClick","rtl","pauseOnFocusLoss","draggable","pauseOnHover","NotificationSuccess","text","NotificationError","DefaultProps","defaultProps","AddMeme","save","useState","name","setName","image","setImage","description","setDescription","setLocation","price","setPrice","show","setShow","handleClose","Button","style","width","class","Modal","onHide","centered","Header","closeButton","Title","Form","Body","FloatingLabel","controlId","label","Control","type","onChange","e","value","placeholder","height","Footer","disabled","Meme","meme","buy","vote","sold","owner","upvotes_count","downvotes_count","triggerVote","voteType","Col","Card","Badge","bg","src","alt","objectFit","Text","utils","format","Loader","role","client","ipfsHttpClient","createMemeRecordOnIPFS","data","JSON","stringify","add","added","url","path","memeData","metadata","createMeme","fetchMemeMeta","ipfsUrl","axios","get","meta","console","log","GAS","uuid4","parseNearAmount","setMeme","getMemes","memes","memeList","forEach","memeItem","Promise","resolve","getMemeVotes","memeId","push","all","buyMeme","voteMeme","isSuccess","reject","Memes","setMemes","loading","setLoading","useCallback","getMemeList","error","addMeme","then","resp","toast","voteMemeItem","useEffect","Row","xs","sm","lg","map","_meme","Cover","coverImg","background","minHeight","maxWidth","fontSize","color","App","balance","setBalance","getBalance","Container","fluid","Nav","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","nearInitPromise","initializeContract","ReactDOM","render","StrictMode","document","getElementById","catch"],"mappings":"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","file":"static/js/main.2d236779.chunk.js","sourcesContent":["const CONTRACT_NAME = process.env.CONTRACT_NAME || \"mememarketplace2.ambidun.testnet\"; // put here a smart contracts' name\n\nfunction environment(env) {\n  switch (env) {\n    case \"mainnet\":\n      return {\n        networkId: \"mainnet\",\n        nodeUrl: \"https://rpc.mainnet.near.org\",\n        contractName: CONTRACT_NAME,\n        walletUrl: \"https://wallet.near.org\",\n        helperUrl: \"https://helper.mainnet.near.org\",\n        explorerUrl: \"https://explorer.mainnet.near.org\",\n      };\n    case \"testnet\":\n      return {\n        networkId: \"testnet\",\n        nodeUrl: \"https://rpc.testnet.near.org\",\n        contractName: CONTRACT_NAME,\n        walletUrl: \"https://wallet.testnet.near.org\",\n        helperUrl: \"https://helper.testnet.near.org\",\n        explorerUrl: \"https://explorer.testnet.near.org\",\n      };\n    default:\n      throw Error(`Unknown environment '${env}'.`);\n  }\n}\n\nexport default environment;\n","import environment from \"./config\";\nimport { connect, Contract, keyStores, WalletConnection } from \"near-api-js\";\nimport { formatNearAmount } from \"near-api-js/lib/utils/format\";\n\nconst nearEnv = environment(\"testnet\");\n\nexport async function initializeContract() {\n  const near = await connect(\n    Object.assign(\n      { deps: { keyStore: new keyStores.BrowserLocalStorageKeyStore() } },\n      nearEnv\n    )\n  );\n  window.walletConnection = new WalletConnection(near);\n  window.accountId = window.walletConnection.getAccountId();\n  window.contract = new Contract(\n    window.walletConnection.account(),\n    nearEnv.contractName,\n    {\n      // List here all view methods\n      viewMethods: [\"getMeme\", \"getMemes\", \"getMemeVotes\"],\n      // List call methods that change state\n      changeMethods: [\"buyMeme\", \"setMeme\", \"voteMeme\"],\n    }\n  );\n}\n\nexport async function accountBalance() {\n  return formatNearAmount(\n    (await window.walletConnection.account().getAccountBalance()).total,\n    2\n  );\n}\n\nexport async function getAccountId() {\n  return window.walletConnection.getAccountId();\n}\n\nexport function login() {\n  window.walletConnection.requestSignIn(nearEnv.contractName);\n}\n\nexport function logout() {\n  window.walletConnection.signOut();\n  window.location.reload();\n}\n","import React from \"react\";\nimport { Dropdown, Stack, Spinner } from \"react-bootstrap\";\n\nconst Wallet = ({ address, amount, symbol, destroy }) => {\n  if (address) {\n    return (\n      <>\n        <Dropdown>\n          <Dropdown.Toggle\n            variant=\"light\"\n            align=\"end\"\n            id=\"dropdown-basic\"\n            className=\"d-flex align-items-center border rounded-pill py-1\"\n          >\n            {amount ? (\n              <>\n                {amount} <span className=\"ms-1\"> {symbol}</span>\n              </>\n            ) : (\n              <Spinner animation=\"border\" size=\"sm\" className=\"opacity-25\" />\n            )}\n          </Dropdown.Toggle>\n\n          <Dropdown.Menu className=\"shadow-lg border-0\">\n            <Dropdown.Item\n              href={`https://explorer.testnet.near.org/accounts/${address}`}\n              target=\"_blank\"\n            >\n              <Stack direction=\"horizontal\" gap={2}>\n                <i className=\"bi bi-person-circle fs-4\" />\n                <span className=\"font-monospace\">{address}</span>\n              </Stack>\n            </Dropdown.Item>\n\n            <Dropdown.Divider />\n            <Dropdown.Item\n              as=\"button\"\n              className=\"d-flex align-items-center\"\n              onClick={() => {\n                destroy();\n              }}\n            >\n              <i className=\"bi bi-box-arrow-right me-2 fs-4\" />\n              Disconnect\n            </Dropdown.Item>\n          </Dropdown.Menu>\n        </Dropdown>\n      </>\n    );\n  }\n\n  return null;\n};\n\nexport default Wallet;\n","import React from \"react\";\nimport { ToastContainer } from \"react-toastify\";\nimport PropTypes from \"prop-types\";\nimport \"react-toastify/dist/ReactToastify.css\";\n\nconst Notification = () => (\n  <ToastContainer\n    position=\"bottom-center\"\n    autoClose={5000}\n    hideProgressBar\n    newestOnTop\n    closeOnClick\n    rtl={false}\n    pauseOnFocusLoss\n    draggable={false}\n    pauseOnHover\n  />\n);\n\nconst NotificationSuccess = ({ text }) => (\n  <div>\n    <i className=\"bi bi-check-circle-fill text-success mx-2\" />\n    <span className=\"text-secondary mx-1\">{text}</span>\n  </div>\n);\n\nconst NotificationError = ({ text }) => (\n  <div>\n    <i className=\"bi bi-x-circle-fill text-danger mx-2\" />\n    <span className=\"text-secondary mx-1\">{text}</span>\n  </div>\n);\n\nconst Props = {\n  text: PropTypes.string,\n};\n\nconst DefaultProps = {\n  text: \"\",\n};\n\nNotificationSuccess.propTypes = Props;\nNotificationSuccess.defaultProps = DefaultProps;\n\nNotificationError.propTypes = Props;\nNotificationError.defaultProps = DefaultProps;\n\nexport { Notification, NotificationSuccess, NotificationError };\n","import React, { useState } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { Button, Modal, Form, FloatingLabel } from \"react-bootstrap\";\n\nconst AddMeme = ({ save }) => {\n  const [name, setName] = useState(\"\");\n  const [image, setImage] = useState(\"\");\n  const [description, setDescription] = useState(\"\");\n  const [location, setLocation] = useState(\"\");\n  const [price, setPrice] = useState(0);\n  const isFormFilled = () => name && image && description && location && price;\n\n  const [show, setShow] = useState(false);\n\n  const handleClose = () => setShow(false);\n  const handleShow = () => setShow(true);\n\n  return (\n    <>\n      <Button\n        onClick={handleShow}\n        variant=\"dark\"\n        className=\"rounded-pill px-0\"\n        style={{ width: \"38px\" }}\n      >\n        <i class=\"bi bi-plus\"></i>\n      </Button>\n      <Modal show={show} onHide={handleClose} centered>\n        <Modal.Header closeButton>\n          <Modal.Title>New Meme</Modal.Title>\n        </Modal.Header>\n        <Form>\n          <Modal.Body>\n            <FloatingLabel\n              controlId=\"inputName\"\n              label=\"Meme name\"\n              className=\"mb-3\"\n            >\n              <Form.Control\n                type=\"text\"\n                onChange={(e) => {\n                  setName(e.target.value);\n                }}\n                placeholder=\"Enter name of meme\"\n              />\n            </FloatingLabel>\n            <FloatingLabel\n              controlId=\"inputUrl\"\n              label=\"Image URL\"\n              className=\"mb-3\"\n            >\n              <Form.Control\n                type=\"text\"\n                placeholder=\"Image URL\"\n                onChange={(e) => {\n                  setImage(e.target.value);\n                }}\n              />\n            </FloatingLabel>\n            <FloatingLabel\n              controlId=\"inputDescription\"\n              label=\"Description\"\n              className=\"mb-3\"\n            >\n              <Form.Control\n                as=\"textarea\"\n                placeholder=\"description\"\n                style={{ height: \"80px\" }}\n                onChange={(e) => {\n                  setDescription(e.target.value);\n                }}\n              />\n            </FloatingLabel>\n            <FloatingLabel\n              controlId=\"inputLocation\"\n              label=\"Location\"\n              className=\"mb-3\"\n            >\n              <Form.Control\n                type=\"text\"\n                placeholder=\"Location\"\n                onChange={(e) => {\n                  setLocation(e.target.value);\n                }}\n              />\n            </FloatingLabel>\n            <FloatingLabel\n              controlId=\"inputPrice\"\n              label=\"Price\"\n              className=\"mb-3\"\n            >\n              <Form.Control\n                type=\"text\"\n                placeholder=\"Price\"\n                onChange={(e) => {\n                  setPrice(e.target.value);\n                }}\n              />\n            </FloatingLabel>\n          </Modal.Body>\n        </Form>\n        <Modal.Footer>\n          <Button variant=\"outline-secondary\" onClick={handleClose}>\n            Close\n          </Button>\n          <Button\n            variant=\"dark\"\n            disabled={!isFormFilled()}\n            onClick={() => {\n              save({\n                name,\n                image,\n                description,\n                location,\n                price,\n              });\n              handleClose();\n            }}\n          >\n            Save meme\n          </Button>\n        </Modal.Footer>\n      </Modal>\n    </>\n  );\n};\n\nAddMeme.propTypes = {\n  save: PropTypes.func.isRequired,\n};\n\nexport default AddMeme;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { utils } from \"near-api-js\";\nimport { Card, Button, Col, Badge, Stack } from \"react-bootstrap\";\n\nconst Meme = ({ meme, buy, vote }) => {\n  const { id, price, name, description, sold, location, image, owner, upvotes_count, downvotes_count } =\n    meme;\n\n  const triggerBuy = () => {\n    buy(id, price);\n  };\n\n  const triggerVote = (voteType) => {\n    vote(id, voteType);\n  };\n\n  return (\n    <Col key={id}>\n      <Card className=\" h-100\">\n        <Card.Header>\n          <Stack direction=\"horizontal\" gap={2}>\n            <span className=\"font-monospace text-secondary\">{owner}</span>  \n\n            <button type=\"button\" class=\"btn btn-success position-relative btn-xs ms-auto\"  onClick={() => triggerVote(1)}>\n              <i class=\"bi bi-hand-thumbs-up-fill\"></i>\n              <span class=\"position-absolute top-0 start-100 translate-middle badge rounded-pill bg-dark\">\n               {upvotes_count}            \n              </span>\n            </button>\n\n            <button type=\"button\" class=\"btn btn-danger position-relative btn-xs ms-auto\" onClick={() => triggerVote(0)}>\n              <i class=\"bi bi-hand-thumbs-down-fill\"></i>\n              <span class=\"position-absolute top-0 start-100 translate-middle badge rounded-pill bg-dark\">\n               {downvotes_count}            \n              </span>\n            </button>\n\n            <Badge bg=\"secondary\" className=\"ms-auto\">\n              {sold} Sold\n            </Badge>\n          </Stack>\n        </Card.Header>\n        <div className=\" ratio ratio-4x3\">\n          <img src={image} alt={name} style={{ objectFit: \"cover\" }} />\n        </div>\n        <Card.Body className=\"d-flex  flex-column text-center\">\n          <Card.Title>{name}</Card.Title>\n          <Card.Text className=\"flex-grow-1 \">{description}</Card.Text>\n          <Card.Text className=\"text-secondary\">\n            <span>{location}</span>\n          </Card.Text>          \n          <Button\n            variant=\"outline-dark\"\n            onClick={triggerBuy}\n            className=\"w-100 py-3\"\n          >\n            Buy for {utils.format.formatNearAmount(price)} NEAR\n          </Button>\n        </Card.Body>\n      </Card>\n    </Col>\n  );\n};\n\nMeme.propTypes = {\n  meme: PropTypes.instanceOf(Object).isRequired,\n  buy: PropTypes.func.isRequired,\n  vote : PropTypes.func.isRequired,\n};\n\nexport default Meme;\n","import React from \"react\";\nimport { Spinner } from \"react-bootstrap\";\n\nconst Loader = () => (\n  <div className=\"d-flex justify-content-center\">\n    <Spinner animation=\"border\" role=\"status\" className=\"opacity-25\">\n      <span className=\"visually-hidden\">Loading...</span>\n    </Spinner>\n  </div>\n);\nexport default Loader;\n","import { create as ipfsHttpClient } from \"ipfs-http-client\";\nimport axios from \"axios\";\nimport { createMeme } from \"./marketplace\";\n\nexport const client = ipfsHttpClient(\"https://ipfs.infura.io:5001/api/v0\");\n\nexport async function createMemeRecordOnIPFS(meme) {\n    const data =  JSON.stringify({\n      name: meme.name,\n      image: meme.image,\n      description: meme.description,\n      location: meme.location\n    });\n    try {\n      // save meme metadata to IPFS\n      const added = await client.add(data);\n      // IPFS url for uploaded metadata\n      const url = `https://ipfs.io/ipfs/${added.path}`;\n  \n      let memeData = {\n        price: meme.price,\n        metadata: url\n      };\n      //now add the meme, including the IPFS url to the blockchain\n      let saveMeme = createMeme(memeData);   \n  \n    } catch(error){\n    }\n}\n\n\n\n// get the metedata for a meme from IPFS\nexport const fetchMemeMeta = async (ipfsUrl) => {\n    try {\n        if (!ipfsUrl) return null;\n        const meta = await axios.get(ipfsUrl);\n        return meta;\n    } catch (e) {\n        console.log({e});\n    }\n};\n","import { v4 as uuid4 } from \"uuid\";\nimport { parseNearAmount } from \"near-api-js/lib/utils/format\";\nimport {fetchMemeMeta} from \"./ipfs\"\n\nconst GAS = 100000000000000;\n\n\n\nexport async function createMeme(meme) {\n  meme.id = uuid4();\n  meme.price = parseNearAmount(meme.price + \"\");\n  return await window.contract.setMeme({ meme });\n}\n\nexport async function getMemes() {\n  try{\n    const memes = await window.contract.getMemes();\n    const memeList = [];    \n    memes.forEach(meme => {\n      const memeItem = new Promise( async (resolve) => {\n        const meta = await fetchMemeMeta(meme.metadata);      \n        //call contract method to get votes count  \n        const vote= await window.contract.getMemeVotes({ memeId: meme.id});\n        resolve({\n          id: meme.id,\n          price: meme.price,\n          owner: meme.owner,\n          sold: meme.sold,          \n          downvotes_count: vote[0],\n          upvotes_count: vote[1],\n          name: meta.data.name,\n          image: meta.data.image,\n          description: meta.data.description,\n          location: meta.data.location\n        });  \n    });\n    memeList.push(memeItem);\n  });\n    return Promise.all(memeList);\n  } catch(e){\n    console.log({e});\n  }   \n}\n\nexport async function buyMeme({ id, price }) {\n  await window.contract.buyMeme({ memeId: id }, GAS, price);\n}\n\nexport async function voteMeme({id, voteType}){\n   const isSuccess = await window.contract.voteMeme({memeId: id, voteType: voteType}, GAS);\n   if (isSuccess){\n      return Promise.resolve(isSuccess);\n   } else{\n     return Promise.reject();\n   }\n}\n","import React, { useEffect, useState, useCallback } from \"react\";\nimport { toast } from \"react-toastify\";\nimport AddMeme from \"./AddMeme\";\nimport Meme from \"./Meme\";\nimport Loader from \"../utils/Loader\";\nimport { Row } from \"react-bootstrap\";\n\nimport { NotificationSuccess, NotificationError } from \"../utils/Notifications\";\nimport {\n  getMemes as getMemeList,\n  buyMeme,\n  voteMeme \n} from \"../../utils/marketplace\";\n\nimport {  \n  createMemeRecordOnIPFS\n} from \"../../utils/ipfs\"\n\nconst Memes = () => {\n  const [memes, setMemes] = useState([]);\n  const [loading, setLoading] = useState(false);\n\n  // function to get the list of memes\n  const getMemes = useCallback(async () => {\n    try {\n      setLoading(true);\n      setMemes(await getMemeList());\n    } catch (error) {\n      console.log({ error });\n    } finally {\n      setLoading(false);\n    }\n  });\n\n  const addMeme = async (data) => {\n    try {      \n      setLoading(true);\n      createMemeRecordOnIPFS(data).then((resp) => {\n        getMemes();\n      });\n      toast(<NotificationSuccess text=\"Meme added successfully.\" />);\n    } catch (error) {\n      toast(<NotificationError text=\"Failed to create a meme.\" />);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  //  function to initiate transaction\n  const buy = async (id, price) => {\n    try {\n      await buyMeme({\n        id,\n        price,\n      }).then((resp) => getMemes());\n      toast(<NotificationSuccess text=\"Meme bought successfully\" />);\n    } catch (error) {\n      toast(<NotificationError text=\"Failed to purchase meme.\" />);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // function to vote for a meme\n  const voteMemeItem = async (id, voteType) => {\n    try{\n      await voteMeme({\n        id, \n        voteType,\n      }).then((resp) => getMemes());\n      toast(<NotificationSuccess text= {(voteType == 0)? \"Meme downvoted\" : \"Meme upvoted\"} />);\n    } catch (error) {\n      toast(<NotificationError text={`Error voting meme, have you voted before?`} />);\n    } finally {\n      setLoading(false);\n    }\n  };\n  \n\n  useEffect(() => {\n    getMemes();\n  }, []);\n\n  return (\n    <>\n      {!loading ? (\n        <>\n          <div className=\"d-flex justify-content-between align-items-center mb-4\">\n            <h1 className=\"fs-4 fw-bold mb-0\">Memes</h1>\n            <AddMeme save={addMeme} />\n          </div>\n          <Row xs={1} sm={2} lg={3} className=\"g-3  mb-5 g-xl-4 g-xxl-5\">\n            {memes.map((_meme) => (\n              <Meme\n                meme={{\n                  ..._meme,\n                }}\n                buy={buy}\n                vote={voteMemeItem}\n              />\n            ))}\n          </Row>\n        </>\n      ) : (\n        <Loader />\n      )}\n    </>\n  );\n};\n\nexport default Memes;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { Button } from \"react-bootstrap\";\n\nconst Cover = ({ name, login, coverImg }) => {\n  if ((name, login, coverImg)) {\n    return (\n      <div\n        className=\"d-flex justify-content-center flex-column text-center \"\n        style={{ background: \"#eb690c\", minHeight: \"100vh\" }}\n      >\n        <div className=\"mt-auto text-light mb-5\">\n          <div\n            className=\" ratio ratio-1x1 mx-auto mb-2\"\n            style={{ maxWidth: \"320px\" }}\n          >\n            <img src={coverImg} alt=\"\" />\n          </div>\n          <h1>{name}</h1>\n          <p style={{ fontSize: \"x-large\", color: \"aquamarine\"}}\n          >Your one stop marketplace for Trending Memes</p>\n          <p>Please connect your wallet to continue.</p>\n          <Button\n            onClick={login}\n            variant=\"outline-light\"\n            className=\"rounded-pill px-3 mt-3\"\n          >\n            Connect your Wallet To Continue\n          </Button>\n        </div>\n        <p className=\"mt-auto text-secondary\">Powered by NEAR</p>\n      </div>\n    );\n  }\n  return null;\n};\n\nCover.propTypes = {\n  name: PropTypes.string,\n};\n\nCover.defaultProps = {\n  name: \"\",\n};\n\nexport default Cover;\n","export default __webpack_public_path__ + \"static/media/dgm.97983f86.jpg\";","import React, { useEffect, useCallback, useState } from \"react\";\nimport { Container, Nav } from \"react-bootstrap\";\nimport { login, logout as destroy, accountBalance } from \"./utils/near\";\nimport Wallet from \"./components/Wallet\";\nimport { Notification } from \"./components/utils/Notifications\";\nimport Memes from \"./components/marketplace/Memes\";\nimport Cover from \"./components/utils/Cover\";\nimport coverImg from \"./assets/img/dgm.jpg\";\nimport \"./App.css\";\n\nconst App = function AppWrapper() {\n  const account = window.walletConnection.account();\n\n  const [balance, setBalance] = useState(\"0\");\n\n  const getBalance = useCallback(async () => {\n    if (account.accountId) {\n      setBalance(await accountBalance());\n    }\n  });\n\n  useEffect(() => {\n    getBalance();\n  }, [getBalance]);\n\n  return (\n    <>\n      <Notification />\n      {account.accountId ? (\n        <Container fluid=\"md\">\n          <Nav className=\"justify-content-end pt-3 pb-5\">\n            <Nav.Item>\n              <Wallet\n                address={account.accountId}\n                amount={balance}\n                symbol=\"NEAR\"\n                destroy={destroy}\n              />\n            </Nav.Item>\n          </Nav>\n          <main>\n            <h2>Your one-stop marketplace for Trending Memes. Buy and Vote your fav memes.</h2>\n            <Memes />\n          </main>\n        </Container>\n      ) : (\n        <Cover name=\"Meme Market\" login={login} coverImg={coverImg} />\n      )}\n    </>\n  );\n};\n\nexport default App;\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({\n      getCLS, getFID, getFCP, getLCP, getTTFB,\n    }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport { initializeContract } from \"./utils/near\";\n\nimport \"bootstrap-icons/font/bootstrap-icons.css\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\nwindow.nearInitPromise = initializeContract()\n  .then(() => {\n    ReactDOM.render(\n      <React.StrictMode>\n        <App />\n      </React.StrictMode>,\n      document.getElementById(\"root\")\n    );\n  })\n  .catch(console.error);\n\nreportWebVitals();\n"],"sourceRoot":""}